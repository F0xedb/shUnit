#!/bin/bash

# Build and maintained by Tom Meyers
# Contact email- tom@pbfp.team
# Contact github - F0xedb

version="v0.1.0"

# color information
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;35m'
NC='\033[0m' # No Color

# location of the assert file
name=$(basename "$0")
directory=$(printf "%s" "$0" | sed "s:$name::")
source "$directory"assert.sh

# special settings
shopt -s globstar
trap "destroyTest && destory" SIGHUP

# default behaviour of special functions
function setup {
    return 0
}
function destroy {
    return 0
}
function setupTest {
    return 0
}
function destroyTest {
    return 0
}

# $1 is the unit filename
# $2 is the function name
function run-function {
                source "$1"
                echo -e "$BLUE Running test: $2 $NC"
                setupTest || echo -e "${RED}Error: running setupTest${NC}"

                "$2"

                destroyTest || echo -e "${RED}Error: running destroyTest${NC}"
}

# execute all test in a single unit $1 is the shUnit filename $2 is the units file name
function execute-test {
        func=$(grep "function Test.*{" "$2" | sed 's:function ::' | sed 's: {::')
        for unitTest in $func; do
                "$1" -f "$2" "$unitTest"
        done
}

# $1 is the shUnit
# $2 is the unitfile to be ran
function run-unit {
    # get the file comment
    desc=$(head -n1 "$2" | sed 's:^#::')
    # print out the file comment
    echo -e "$BLUE$desc$NC"
    # load in the file
    source "$2"
    # perform initial setup
    setup || echo -e "${RED}Error: running setup${NC}"
    
    execute-test "$1" "$2"

    # perform destruction
    destroy || echo -e "${RED} Error: running destroy${NC}"
}

function reset {
        if [[ -d ".shunit" ]]; then
                rm -rf .shunit
        fi
        mkdir .shunit
        touch .shunit/pass
        touch .shunit/error


}

# $1 is the path to shUnit
function iterate {
    reset
    for unit in **/*.shUnit; do
        if [[ -f "$unit" ]]; then
           echo -e "$BLUE Running unit: $NC$unit"
           "$1" -r "$unit"
           echo -e "$BLUE--------------------------------------------------------$NC"
        fi
    done 
    pass=$(wc -l .shunit/pass | awk '{print $1}')
    error=$(wc -l .shunit/error | awk '{print $1}')
    echo "Pass: $pass, Errors: $error"
    if [[ "$error" -gt "0" ]]; then
            exit 1
    fi
}


if [[ "$1" == "-r" ]]; then
        run-unit "$0" "$2"
elif [[ "$1" == "-f" ]]; then
        run-function "$2" "$3"
elif [[ "$1" == "-v" ]]; then
        echo $version
        exit 0
else
        iterate "$0"
fi

